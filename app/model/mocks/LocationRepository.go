// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "ot-recorder/app/model"

	mock "github.com/stretchr/testify/mock"
)

// LocationRepository is an autogenerated mock type for the LocationRepository type
type LocationRepository struct {
	mock.Mock
}

// CreateLocation provides a mock function with given fields: tx, location
func (_m *LocationRepository) CreateLocation(tx context.Context, location *model.Location) error {
	ret := _m.Called(tx, location)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Location) error); ok {
		r0 = rf(tx, location)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserLastLocation provides a mock function with given fields: tx, username
func (_m *LocationRepository) GetUserLastLocation(tx context.Context, username string) (model.Location, error) {
	ret := _m.Called(tx, username)

	var r0 model.Location
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Location); ok {
		r0 = rf(tx, username)
	} else {
		r0 = ret.Get(0).(model.Location)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(tx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLocationRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewLocationRepository creates a new instance of LocationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLocationRepository(t mockConstructorTestingTNewLocationRepository) *LocationRepository {
	mock := &LocationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
