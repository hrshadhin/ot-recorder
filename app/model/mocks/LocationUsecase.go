// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "ot-recorder/app/model"

	mock "github.com/stretchr/testify/mock"
)

// LocationUsecase is an autogenerated mock type for the LocationUsecase type
type LocationUsecase struct {
	mock.Mock
}

// LastLocation provides a mock function with given fields: c, username
func (_m *LocationUsecase) LastLocation(c context.Context, username string) (*model.LocationDetails, error) {
	ret := _m.Called(c, username)

	var r0 *model.LocationDetails
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.LocationDetails); ok {
		r0 = rf(c, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LocationDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: c, l
func (_m *LocationUsecase) Ping(c context.Context, l *model.Location) error {
	ret := _m.Called(c, l)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Location) error); ok {
		r0 = rf(c, l)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TelegramHook provides a mock function with given fields: c, req
func (_m *LocationUsecase) TelegramHook(c context.Context, req *model.TelegramRequest) *model.TelegramResponse {
	ret := _m.Called(c, req)

	var r0 *model.TelegramResponse
	if rf, ok := ret.Get(0).(func(context.Context, *model.TelegramRequest) *model.TelegramResponse); ok {
		r0 = rf(c, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TelegramResponse)
		}
	}

	return r0
}

type mockConstructorTestingTNewLocationUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewLocationUsecase creates a new instance of LocationUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLocationUsecase(t mockConstructorTestingTNewLocationUsecase) *LocationUsecase {
	mock := &LocationUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
